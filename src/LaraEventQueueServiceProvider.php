<?php


namespace ZoranWong\LaraEventQueue;

use Illuminate\Contracts\Debug\ExceptionHandler;
use Illuminate\Queue\QueueManager;
use Illuminate\Queue\QueueServiceProvider;
use Illuminate\Queue\Worker;
use ZoranWong\LaraEventQueue\Connectors\ReliableRedisConnector;

class LaraEventQueueServiceProvider extends QueueServiceProvider
{

    public function register()
    {
        parent::register(); // TODO: Change the autogenerated stub
        $this->app->singleton('reliable.queue.cache', function () {
            return $this->app->make('cache')->store('');
        });
    }

    /**
     * Register the connectors on the queue manager.
     *
     * @param  QueueManager  $manager
     * @return void
     */
    public function registerConnectors($manager)
    {
        foreach (['Null', 'Sync', 'Database', 'Redis', 'Beanstalkd', 'Sqs', 'ReliableRedis'] as $connector) {
            $this->{"register{$connector}Connector"}($manager);
        }
    }
    /**
     * Register the Redis queue connector.
     *
     * @param  QueueManager  $manager
     * @return void
     */
    protected function registerReliableRedisConnector($manager)
    {
        $manager->addConnector('reliable-redis', function () {
            return new ReliableRedisConnector($this->app['redis']);
        });
    }

    /**
     * Register the queue worker.
     *
     * @return void
     */
    protected function registerWorker()
    {
        $this->app->singleton('queue.worker', function ($app) {
            $isDownForMaintenance = function () {
                return $this->app->isDownForMaintenance();
            };

            return new EventQueueWorker(
                $app['queue'],
                $app['events'],
                $app[ExceptionHandler::class],
                $isDownForMaintenance
            );
        });
    }
}
