<?php


namespace ZoranWong\LaraEventQueue\Queue;


use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Queue\LuaScripts;
use Illuminate\Queue\RedisQueue;
use ZoranWong\LaraEventQueue\Jobs\OrderJobInterface;
use ZoranWong\LaraEventQueue\Jobs\ReliableJobInterface;

class ReliableRedisQueue extends RedisQueue
{
    protected $jobs = [];

    protected $runningJob = null;

    /**
     * @param ShouldQueue|ReliableJobInterface $job
     * */
    public function ack($job)
    {
        $this->getConnection()->command('', [$job->getUUId()]);
    }

    public function nack($job)
    {
        return $this->lpush($job);
    }

    public function pop($queue = null)
    {
        $this->runningJob = parent::pop($queue); // TODO: Change the autogenerated stub
        return $this->runningJob;
    }

    public function lpush($job, $data = '', $queue = null)
    {
        return $this->enqueueUsing(
            $job,
            $this->createPayload($job, $this->getQueue($queue), $data),
            $queue,
            null,
            function ($payload, $queue) {
                return $this->lPushRaw($payload, $queue);
            }
        );
    }

    /**
     * Push a raw payload onto the queue.
     *
     * @param string $payload
     * @param string|null $queue
     * @param array $options
     * @return mixed
     */
    public function lPushRaw($payload, $queue = null, array $options = [])
    {
        $this->getConnection()->eval(LuaScripts::lpush(), 2, $this->getQueue($queue), $this->getQueue($queue) . ':notify', $payload);

        return json_decode($payload, true)['id'] ?? null;
    }

    public function push($job, $data = '', $queue = null)
    {
        $uuid = parent::push($job, $data, $queue); // TODO: Change the autogenerated stub
        if($job instanceof OrderJobInterface) {
            $job->addUUIdInOrder($uuid);
        }
    }

    /**
     * Push a raw payload onto the queue.
     *
     * @param  string  $payload
     * @param  string|null  $queue
     * @param  array  $options
     * @return mixed
     */
    public function pushRaw($payload, $queue = null, array $options = [])
    {
        $this->getConnection()->eval(
            LuaScripts::push(), 2, $this->getQueue($queue),
            $this->getQueue($queue).':notify', $payload
        );

        return json_decode($payload, true)['uuid'] ?? null;
    }

    public function later($delay, $job, $data = '', $queue = null)
    {
        return parent::later($delay, $job, $data, $queue); // TODO: Change the autogenerated stub
    }

    public function bulk($jobs, $data = '', $queue = null)
    {
        $returnJobs = [];
        $this->getConnection()->pipeline(function () use ($jobs, $data, $queue, $returnJobs) {
            $this->getConnection()->transaction(function () use ($jobs, $data, $queue, $returnJobs) {
                foreach ((array)$jobs as $job) {
                    $temp = $this->push($job, $data, $queue);
                    array_push($returnJobs, $temp);
                }
            });
        });
        $this->jobs = array_merge($this->jobs, $returnJobs);
        return $returnJobs;
    }


}
